File Name:	Utilities Class Reference
Author:		zhanghaoran
Date:		2015.10.14

1.ABSTRACT

a class description.

2.CLASS HIERARCHY MAP

Singleton

SourceInfo

Logger

3.CLASS DESCRIPTIONS

template<class T> class Singleton
description:
	A template class to realise a singleton.
functions:
public:
	static * T instance():
		Get a singleton instance of the class T. An example for class Foo:
			Use "typedef Singleton<Foo> FooInstance;"
			and then you can use "FooInstance::instance()" as a pointer of the class Foo singleton.
			For example, foo has a public function func(). You could call it like this:
			FooInstance::instance()->func() 

class SourceInfo
description:
	A set of file name, line number and function name.
functions:
public:
	std::string getFileName():
		Get file name of the object.

	u_int32_t getLineNum():
		Get line number of the object.

	std::string getFuncName():
		Get function name of the object.

	isEmpty():
		Return true if the set of the object is empty. It will return true if the line number is zero.

class Logger
description: 
	A class of log. The log is splited into seven levels:
		LOG_DEBUG
		LOG_INFO
		LOG_NOTICE
		LOG_WARNING
		LOG_ERROR
		LOG_CRITICAL
		LOG_EMERGENCY
	Default level is LOG_DEBUG.
	You could change the log path by calling function setLogPath. The default path is DEFAULT_LOG_PATH.
functions:
public:
	void setLogLevel(int level):
		Set the log level of the object to parameter "level".

	int getLogLevel():
		Get the log level of the object.

	void setLogPath(std::string path):
		Set the full name of log path. If path is "stdout", The log will put in standard output.

	std::string getLogPath():
		Get the full name of log path. Return "stdout" if the log is put in standard output.

	bool start():
		Start the Logger object.

	bool stop():
		Stop the Logger object.

	bool restart():
		Restart the Logger object.

	bool isActive():
		Return true if the Logger object is active.

	LogType getLogType():
		Return the log type of the Logger object. the LogType is defined as an enum like:
			enum LogType {
				LOG_CONSOLE = 0,
				LOG_FILE,
				LOG_SYSTEM
			};

	void output(std::string dataTime, int level, const SourceInfo &si, std::string prefix, std::string msg):
		Format output the log message. 
		parameters:
			dataTime - string of data and time.
			level -	log level.
			si - source information. SourceInfo is a class to express informations such as file name, line number and function name.

	static std::string logLevelToString(int level):
		Translate an int format log level to string format.

	static int logStrToLevel(std::string strlog):
		Translate a string format log level to int format.

private:
	std::string makeLogStrFormat(std::string dataTime, int level, const SourceInfo &si, std::string prefix, std::string msg):
		Format parameters as a string.
		parameters:
			dataTime - string of data and time.
			level -	log level.
			si - source information. SourceInfo is a class to express informations such as file name, line number and function name.


